var CCC = CCC || {};

CCC.TRADE=CCC.TRADE || {};
/*
trade fields binary values always in the last ~
*/
CCC.TRADE.DECIMALS = 1e+16;
CCC.TRADE.FLAGS = {
    'SELL'       : 0x1 // hex for binary 1
  , 'BUY'        : 0x2 // hex for binary 10
  , 'UNKNOWN'    : 0x4 // hex for binary 100
};

CCC.TRADE.FIELDS = {
    'T'          : 0x0  // hex for binary 0, it is a special case of fields that are always there TYPE
  , 'M'          : 0x0  // hex for binary 0, it is a special case of fields that are always there MARKET
  , 'FSYM'       : 0x0  // hex for binary 0, it is a special case of fields that are always there FROM SYMBOL
  , 'TSYM'       : 0x0  // hex for binary 0, it is a special case of fields that are always there TO SYMBOL
  , 'F'          : 0x0  // hex for binary 0, it is a special case of fields that are always there FLAGS
  , 'ID'         : 0x1  // hex for binary 1                                                       ID
  , 'TS'         : 0x2  // hex for binary 10                                                      TIMESTAMP
  , 'Q'          : 0x4  // hex for binary 100                                                     QUANTITY
  , 'P'          : 0x8  // hex for binary 1000                                                    PRICE
  , 'TOTAL'      : 0x10 // hex for binary 10000                                                   TOTAL

};

CCC.TRADE.getTradeTypeFlag = function(tradeData, key, buyString, sellString){
    var flag = CCC.TRADE.FLAGS.UNKNOWN;
    
    if(tradeData[key] === buyString){
        flag = CCC.TRADE.FLAGS.BUY;
    }
    else if (tradeData[key] === sellString){
        flag = CCC.TRADE.FLAGS.SELL;
    }

    return flag;
};

CCC.TRADE.pack = function(tradeObject){
    var mask = 0;
    var packedTrade ='';
    for (var field in tradeObject) {
        packedTrade += '~'+tradeObject[field];
        mask|=this.FIELDS[field];
    }
    //removing first character beacsue it is a ~
    return packedTrade.substr(1)+'~'+mask.toString(16);
};

CCC.TRADE.multiply = function(val1,val2){
    return Math.round((val1*val2)*CCC.TRADE.DECIMALS)/CCC.TRADE.DECIMALS;
};

CCC.TRADE.unpack = function(tradeString){
    var valuesArray = tradeString.split("~");
    var valuesArrayLenght = valuesArray.length;
    var mask = valuesArray[valuesArrayLenght-1];
    var maskInt = parseInt(mask,16);
    var unpackedTrade = {};
    var currentField = 0;
    for(var property in this.FIELDS){
        if(this.FIELDS[property] === 0)
        {
            unpackedTrade[property] = valuesArray[currentField];
            currentField++;
        }
        else if(maskInt&this.FIELDS[property])
        {
            if(this.FIELDS[property] === 1){ //if it's a trade ID then still convert it as string, otherwise, it will be a number
                unpackedTrade[property] = valuesArray[currentField];
            }else{
                unpackedTrade[property] = parseFloat(valuesArray[currentField]);
            }
            currentField++;
        }
    }

    return unpackedTrade;
};

CCC.TRADE.getKey = function(tradeObject){
    return tradeObject['T']+'~'+tradeObject['M']+'~'+tradeObject['FSYM']+'~'+tradeObject['TSYM'];
};

CCC.TRADE.getExchangeKey = function(tradeObject){
    return tradeObject['T']+'~'+tradeObject['M'];
};
module.exports = CCC.TRADE;